// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/registry/v1beta1/registry.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BundleProposal ...
type BundleProposal struct {
	// uploader ...
	Uploader string `protobuf:"bytes,1,opt,name=uploader,proto3" json:"uploader,omitempty"`
	// next_uploader ...
	NextUploader string `protobuf:"bytes,2,opt,name=next_uploader,json=nextUploader,proto3" json:"next_uploader,omitempty"`
	// bundle_id ...
	BundleId string `protobuf:"bytes,3,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	// byte_size ...
	ByteSize uint64 `protobuf:"varint,4,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	// from_height ...
	FromHeight uint64 `protobuf:"varint,5,opt,name=from_height,json=fromHeight,proto3" json:"from_height,omitempty"`
	// to_height ...
	ToHeight uint64 `protobuf:"varint,6,opt,name=to_height,json=toHeight,proto3" json:"to_height,omitempty"`
	// created_at ...
	CreatedAt uint64 `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// voters_valid ...
	VotersValid []string `protobuf:"bytes,8,rep,name=voters_valid,json=votersValid,proto3" json:"voters_valid,omitempty"`
	// voters_invalid ...
	VotersInvalid []string `protobuf:"bytes,9,rep,name=voters_invalid,json=votersInvalid,proto3" json:"voters_invalid,omitempty"`
}

func (m *BundleProposal) Reset()         { *m = BundleProposal{} }
func (m *BundleProposal) String() string { return proto.CompactTextString(m) }
func (*BundleProposal) ProtoMessage()    {}
func (*BundleProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_db13ea1584a90e6e, []int{0}
}
func (m *BundleProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BundleProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BundleProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BundleProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BundleProposal.Merge(m, src)
}
func (m *BundleProposal) XXX_Size() int {
	return m.Size()
}
func (m *BundleProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BundleProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BundleProposal proto.InternalMessageInfo

func (m *BundleProposal) GetUploader() string {
	if m != nil {
		return m.Uploader
	}
	return ""
}

func (m *BundleProposal) GetNextUploader() string {
	if m != nil {
		return m.NextUploader
	}
	return ""
}

func (m *BundleProposal) GetBundleId() string {
	if m != nil {
		return m.BundleId
	}
	return ""
}

func (m *BundleProposal) GetByteSize() uint64 {
	if m != nil {
		return m.ByteSize
	}
	return 0
}

func (m *BundleProposal) GetFromHeight() uint64 {
	if m != nil {
		return m.FromHeight
	}
	return 0
}

func (m *BundleProposal) GetToHeight() uint64 {
	if m != nil {
		return m.ToHeight
	}
	return 0
}

func (m *BundleProposal) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *BundleProposal) GetVotersValid() []string {
	if m != nil {
		return m.VotersValid
	}
	return nil
}

func (m *BundleProposal) GetVotersInvalid() []string {
	if m != nil {
		return m.VotersInvalid
	}
	return nil
}

// DelegationEntries ...
type DelegationEntries struct {
	// id ...
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// balance ...
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,3,opt,name=staker,proto3" json:"staker,omitempty"`
	// k_index ...
	KIndex uint64 `protobuf:"varint,4,opt,name=k_index,json=kIndex,proto3" json:"k_index,omitempty"`
}

func (m *DelegationEntries) Reset()         { *m = DelegationEntries{} }
func (m *DelegationEntries) String() string { return proto.CompactTextString(m) }
func (*DelegationEntries) ProtoMessage()    {}
func (*DelegationEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_db13ea1584a90e6e, []int{1}
}
func (m *DelegationEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationEntries.Merge(m, src)
}
func (m *DelegationEntries) XXX_Size() int {
	return m.Size()
}
func (m *DelegationEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationEntries.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationEntries proto.InternalMessageInfo

func (m *DelegationEntries) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DelegationEntries) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *DelegationEntries) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *DelegationEntries) GetKIndex() uint64 {
	if m != nil {
		return m.KIndex
	}
	return 0
}

// DelegationPoolData ...
type DelegationPoolData struct {
	// id ...
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// current_rewards ...
	CurrentRewards uint64 `protobuf:"varint,3,opt,name=current_rewards,json=currentRewards,proto3" json:"current_rewards,omitempty"`
	// total_delegation ...
	TotalDelegation uint64 `protobuf:"varint,4,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// latest_index_k ...
	LatestIndexK uint64 `protobuf:"varint,5,opt,name=latest_index_k,json=latestIndexK,proto3" json:"latest_index_k,omitempty"`
	// delegator_count ...
	DelegatorCount uint64 `protobuf:"varint,6,opt,name=delegator_count,json=delegatorCount,proto3" json:"delegator_count,omitempty"`
	// latest_index_was_undelegation ...
	LatestIndexWasUndelegation bool `protobuf:"varint,7,opt,name=latest_index_was_undelegation,json=latestIndexWasUndelegation,proto3" json:"latest_index_was_undelegation,omitempty"`
}

func (m *DelegationPoolData) Reset()         { *m = DelegationPoolData{} }
func (m *DelegationPoolData) String() string { return proto.CompactTextString(m) }
func (*DelegationPoolData) ProtoMessage()    {}
func (*DelegationPoolData) Descriptor() ([]byte, []int) {
	return fileDescriptor_db13ea1584a90e6e, []int{2}
}
func (m *DelegationPoolData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationPoolData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationPoolData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationPoolData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationPoolData.Merge(m, src)
}
func (m *DelegationPoolData) XXX_Size() int {
	return m.Size()
}
func (m *DelegationPoolData) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationPoolData.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationPoolData proto.InternalMessageInfo

func (m *DelegationPoolData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DelegationPoolData) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *DelegationPoolData) GetCurrentRewards() uint64 {
	if m != nil {
		return m.CurrentRewards
	}
	return 0
}

func (m *DelegationPoolData) GetTotalDelegation() uint64 {
	if m != nil {
		return m.TotalDelegation
	}
	return 0
}

func (m *DelegationPoolData) GetLatestIndexK() uint64 {
	if m != nil {
		return m.LatestIndexK
	}
	return 0
}

func (m *DelegationPoolData) GetDelegatorCount() uint64 {
	if m != nil {
		return m.DelegatorCount
	}
	return 0
}

func (m *DelegationPoolData) GetLatestIndexWasUndelegation() bool {
	if m != nil {
		return m.LatestIndexWasUndelegation
	}
	return false
}

// Delegator ...
type Delegator struct {
	// id ...
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// k_index ...
	KIndex uint64 `protobuf:"varint,2,opt,name=k_index,json=kIndex,proto3" json:"k_index,omitempty"`
	// delegation_amount ...
	DelegationAmount uint64 `protobuf:"varint,3,opt,name=delegation_amount,json=delegationAmount,proto3" json:"delegation_amount,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,4,opt,name=staker,proto3" json:"staker,omitempty"`
	// delegator ...
	Delegator string `protobuf:"bytes,5,opt,name=delegator,proto3" json:"delegator,omitempty"`
}

func (m *Delegator) Reset()         { *m = Delegator{} }
func (m *Delegator) String() string { return proto.CompactTextString(m) }
func (*Delegator) ProtoMessage()    {}
func (*Delegator) Descriptor() ([]byte, []int) {
	return fileDescriptor_db13ea1584a90e6e, []int{3}
}
func (m *Delegator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegator.Merge(m, src)
}
func (m *Delegator) XXX_Size() int {
	return m.Size()
}
func (m *Delegator) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegator.DiscardUnknown(m)
}

var xxx_messageInfo_Delegator proto.InternalMessageInfo

func (m *Delegator) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Delegator) GetKIndex() uint64 {
	if m != nil {
		return m.KIndex
	}
	return 0
}

func (m *Delegator) GetDelegationAmount() uint64 {
	if m != nil {
		return m.DelegationAmount
	}
	return 0
}

func (m *Delegator) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *Delegator) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

// Funder ...
type Funder struct {
	// account ...
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// fund_id ...
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// amount ...
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Funder) Reset()         { *m = Funder{} }
func (m *Funder) String() string { return proto.CompactTextString(m) }
func (*Funder) ProtoMessage()    {}
func (*Funder) Descriptor() ([]byte, []int) {
	return fileDescriptor_db13ea1584a90e6e, []int{4}
}
func (m *Funder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Funder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Funder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Funder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funder.Merge(m, src)
}
func (m *Funder) XXX_Size() int {
	return m.Size()
}
func (m *Funder) XXX_DiscardUnknown() {
	xxx_messageInfo_Funder.DiscardUnknown(m)
}

var xxx_messageInfo_Funder proto.InternalMessageInfo

func (m *Funder) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Funder) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Funder) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// Pool ...
type Pool struct {
	// id ...
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// creator ...
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// name ...
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// runtime ...
	Runtime string `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// logo ...
	Logo string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	// versions ...
	Versions string `protobuf:"bytes,6,opt,name=versions,proto3" json:"versions,omitempty"`
	// config ...
	Config string `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	// height_archived ...
	HeightArchived uint64 `protobuf:"varint,8,opt,name=height_archived,json=heightArchived,proto3" json:"height_archived,omitempty"`
	// bytes_archived ...
	BytesArchived uint64 `protobuf:"varint,9,opt,name=bytes_archived,json=bytesArchived,proto3" json:"bytes_archived,omitempty"`
	// total_bundles ...
	TotalBundles uint64 `protobuf:"varint,10,opt,name=total_bundles,json=totalBundles,proto3" json:"total_bundles,omitempty"`
	// total_bundle_rewards ...
	TotalBundleRewards uint64 `protobuf:"varint,11,opt,name=total_bundle_rewards,json=totalBundleRewards,proto3" json:"total_bundle_rewards,omitempty"`
	// start_height ...
	StartHeight uint64 `protobuf:"varint,12,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// upload_interval ...
	UploadInterval uint64 `protobuf:"varint,13,opt,name=upload_interval,json=uploadInterval,proto3" json:"upload_interval,omitempty"`
	// operating_cost ...
	OperatingCost uint64 `protobuf:"varint,14,opt,name=operating_cost,json=operatingCost,proto3" json:"operating_cost,omitempty"`
	// paused ...
	Paused bool `protobuf:"varint,15,opt,name=paused,proto3" json:"paused,omitempty"`
	// funders ...
	Funders []string `protobuf:"bytes,16,rep,name=funders,proto3" json:"funders,omitempty"`
	// lowest_funder ...
	LowestFunder string `protobuf:"bytes,17,opt,name=lowest_funder,json=lowestFunder,proto3" json:"lowest_funder,omitempty"`
	// total_funds ...
	TotalFunds uint64 `protobuf:"varint,18,opt,name=total_funds,json=totalFunds,proto3" json:"total_funds,omitempty"`
	// stakers ...
	Stakers []string `protobuf:"bytes,19,rep,name=stakers,proto3" json:"stakers,omitempty"`
	// lowest_staker ...
	LowestStaker string `protobuf:"bytes,20,opt,name=lowest_staker,json=lowestStaker,proto3" json:"lowest_staker,omitempty"`
	// total_stake ...
	TotalStake uint64 `protobuf:"varint,21,opt,name=total_stake,json=totalStake,proto3" json:"total_stake,omitempty"`
	// total_delegation ...
	TotalDelegation uint64 `protobuf:"varint,22,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// bundle_proposal ...
	BundleProposal *BundleProposal `protobuf:"bytes,23,opt,name=bundle_proposal,json=bundleProposal,proto3" json:"bundle_proposal,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_db13ea1584a90e6e, []int{5}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Pool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pool) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *Pool) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Pool) GetVersions() string {
	if m != nil {
		return m.Versions
	}
	return ""
}

func (m *Pool) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *Pool) GetHeightArchived() uint64 {
	if m != nil {
		return m.HeightArchived
	}
	return 0
}

func (m *Pool) GetBytesArchived() uint64 {
	if m != nil {
		return m.BytesArchived
	}
	return 0
}

func (m *Pool) GetTotalBundles() uint64 {
	if m != nil {
		return m.TotalBundles
	}
	return 0
}

func (m *Pool) GetTotalBundleRewards() uint64 {
	if m != nil {
		return m.TotalBundleRewards
	}
	return 0
}

func (m *Pool) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *Pool) GetUploadInterval() uint64 {
	if m != nil {
		return m.UploadInterval
	}
	return 0
}

func (m *Pool) GetOperatingCost() uint64 {
	if m != nil {
		return m.OperatingCost
	}
	return 0
}

func (m *Pool) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *Pool) GetFunders() []string {
	if m != nil {
		return m.Funders
	}
	return nil
}

func (m *Pool) GetLowestFunder() string {
	if m != nil {
		return m.LowestFunder
	}
	return ""
}

func (m *Pool) GetTotalFunds() uint64 {
	if m != nil {
		return m.TotalFunds
	}
	return 0
}

func (m *Pool) GetStakers() []string {
	if m != nil {
		return m.Stakers
	}
	return nil
}

func (m *Pool) GetLowestStaker() string {
	if m != nil {
		return m.LowestStaker
	}
	return ""
}

func (m *Pool) GetTotalStake() uint64 {
	if m != nil {
		return m.TotalStake
	}
	return 0
}

func (m *Pool) GetTotalDelegation() uint64 {
	if m != nil {
		return m.TotalDelegation
	}
	return 0
}

func (m *Pool) GetBundleProposal() *BundleProposal {
	if m != nil {
		return m.BundleProposal
	}
	return nil
}

// Proposal ...
type Proposal struct {
	// bundle_id ...
	BundleId string `protobuf:"bytes,1,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	// pool_id ...
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// uploader ...
	Uploader string `protobuf:"bytes,3,opt,name=uploader,proto3" json:"uploader,omitempty"`
	// from_height ...
	FromHeight uint64 `protobuf:"varint,4,opt,name=from_height,json=fromHeight,proto3" json:"from_height,omitempty"`
	// to_height ...
	ToHeight uint64 `protobuf:"varint,5,opt,name=to_height,json=toHeight,proto3" json:"to_height,omitempty"`
	// finalized_at ...
	FinalizedAt uint64 `protobuf:"varint,6,opt,name=finalized_at,json=finalizedAt,proto3" json:"finalized_at,omitempty"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_db13ea1584a90e6e, []int{6}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetBundleId() string {
	if m != nil {
		return m.BundleId
	}
	return ""
}

func (m *Proposal) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Proposal) GetUploader() string {
	if m != nil {
		return m.Uploader
	}
	return ""
}

func (m *Proposal) GetFromHeight() uint64 {
	if m != nil {
		return m.FromHeight
	}
	return 0
}

func (m *Proposal) GetToHeight() uint64 {
	if m != nil {
		return m.ToHeight
	}
	return 0
}

func (m *Proposal) GetFinalizedAt() uint64 {
	if m != nil {
		return m.FinalizedAt
	}
	return 0
}

// Staker ...
type Staker struct {
	// staker ...
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// pool_id ...
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// amount ...
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// unbonding_amount ...
	UnbondingAmount uint64 `protobuf:"varint,4,opt,name=unbonding_amount,json=unbondingAmount,proto3" json:"unbonding_amount,omitempty"`
	// commission ...
	Commission string `protobuf:"bytes,5,opt,name=commission,proto3" json:"commission,omitempty"`
	// moniker ...
	Moniker string `protobuf:"bytes,6,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// website ...
	Website string `protobuf:"bytes,7,opt,name=website,proto3" json:"website,omitempty"`
	// logo
	Logo string `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (m *Staker) Reset()         { *m = Staker{} }
func (m *Staker) String() string { return proto.CompactTextString(m) }
func (*Staker) ProtoMessage()    {}
func (*Staker) Descriptor() ([]byte, []int) {
	return fileDescriptor_db13ea1584a90e6e, []int{7}
}
func (m *Staker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staker.Merge(m, src)
}
func (m *Staker) XXX_Size() int {
	return m.Size()
}
func (m *Staker) XXX_DiscardUnknown() {
	xxx_messageInfo_Staker.DiscardUnknown(m)
}

var xxx_messageInfo_Staker proto.InternalMessageInfo

func (m *Staker) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Staker) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Staker) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Staker) GetUnbondingAmount() uint64 {
	if m != nil {
		return m.UnbondingAmount
	}
	return 0
}

func (m *Staker) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

func (m *Staker) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Staker) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Staker) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

// UnbondingEntries ...
type UnbondingEntries struct {
	// index ...
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// pool_id ...
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,3,opt,name=staker,proto3" json:"staker,omitempty"`
	// delegator ...
	Delegator string `protobuf:"bytes,4,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// creation_time ...
	CreationTime uint64 `protobuf:"varint,5,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// amount ...
	Amount uint64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *UnbondingEntries) Reset()         { *m = UnbondingEntries{} }
func (m *UnbondingEntries) String() string { return proto.CompactTextString(m) }
func (*UnbondingEntries) ProtoMessage()    {}
func (*UnbondingEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_db13ea1584a90e6e, []int{8}
}
func (m *UnbondingEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingEntries.Merge(m, src)
}
func (m *UnbondingEntries) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingEntries.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingEntries proto.InternalMessageInfo

func (m *UnbondingEntries) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *UnbondingEntries) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UnbondingEntries) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *UnbondingEntries) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *UnbondingEntries) GetCreationTime() uint64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *UnbondingEntries) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// UnbondingState stores the state for the unbonding of stakes and delegations.
type UnbondingState struct {
	// low_index ...
	LowIndex uint64 `protobuf:"varint,1,opt,name=low_index,json=lowIndex,proto3" json:"low_index,omitempty"`
	// high_index ...
	HighIndex uint64 `protobuf:"varint,2,opt,name=high_index,json=highIndex,proto3" json:"high_index,omitempty"`
}

func (m *UnbondingState) Reset()         { *m = UnbondingState{} }
func (m *UnbondingState) String() string { return proto.CompactTextString(m) }
func (*UnbondingState) ProtoMessage()    {}
func (*UnbondingState) Descriptor() ([]byte, []int) {
	return fileDescriptor_db13ea1584a90e6e, []int{9}
}
func (m *UnbondingState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingState.Merge(m, src)
}
func (m *UnbondingState) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingState) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingState.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingState proto.InternalMessageInfo

func (m *UnbondingState) GetLowIndex() uint64 {
	if m != nil {
		return m.LowIndex
	}
	return 0
}

func (m *UnbondingState) GetHighIndex() uint64 {
	if m != nil {
		return m.HighIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*BundleProposal)(nil), "kyve.registry.v1beta1.BundleProposal")
	proto.RegisterType((*DelegationEntries)(nil), "kyve.registry.v1beta1.DelegationEntries")
	proto.RegisterType((*DelegationPoolData)(nil), "kyve.registry.v1beta1.DelegationPoolData")
	proto.RegisterType((*Delegator)(nil), "kyve.registry.v1beta1.Delegator")
	proto.RegisterType((*Funder)(nil), "kyve.registry.v1beta1.Funder")
	proto.RegisterType((*Pool)(nil), "kyve.registry.v1beta1.Pool")
	proto.RegisterType((*Proposal)(nil), "kyve.registry.v1beta1.Proposal")
	proto.RegisterType((*Staker)(nil), "kyve.registry.v1beta1.Staker")
	proto.RegisterType((*UnbondingEntries)(nil), "kyve.registry.v1beta1.UnbondingEntries")
	proto.RegisterType((*UnbondingState)(nil), "kyve.registry.v1beta1.UnbondingState")
}

func init() {
	proto.RegisterFile("kyve/registry/v1beta1/registry.proto", fileDescriptor_db13ea1584a90e6e)
}

var fileDescriptor_db13ea1584a90e6e = []byte{
	// 1117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xc1, 0x6e, 0x1b, 0x37,
	0x10, 0xf5, 0xca, 0xb2, 0xac, 0x1d, 0xc9, 0xb2, 0xbd, 0x75, 0x92, 0x45, 0x5a, 0x2b, 0xb6, 0x92,
	0x20, 0x2e, 0x8a, 0xda, 0x4d, 0xfb, 0x05, 0x4e, 0x9c, 0xb6, 0x46, 0x8a, 0x20, 0x58, 0xd7, 0x29,
	0xda, 0xcb, 0x82, 0xda, 0xa5, 0x25, 0x42, 0x2b, 0x52, 0x20, 0x29, 0xc9, 0xf6, 0x57, 0x14, 0xe8,
	0xa1, 0xf7, 0x7e, 0x42, 0xd1, 0x6b, 0xef, 0x3d, 0xe6, 0xd8, 0x63, 0x61, 0x03, 0xfd, 0x8e, 0x62,
	0x48, 0xee, 0x6a, 0xd7, 0x71, 0x83, 0xdc, 0x34, 0x8f, 0x4f, 0xc3, 0xe1, 0xf0, 0xf1, 0xcd, 0xc2,
	0xa3, 0xd1, 0xc5, 0x8c, 0x1e, 0x48, 0x3a, 0x60, 0x4a, 0xcb, 0x8b, 0x83, 0xd9, 0xd3, 0x3e, 0xd5,
	0xe4, 0x69, 0x01, 0xec, 0x4f, 0xa4, 0xd0, 0x22, 0xb8, 0x83, 0xac, 0xfd, 0x02, 0x74, 0xac, 0xde,
	0xef, 0x35, 0xe8, 0x3c, 0x9b, 0xf2, 0x34, 0xa3, 0xaf, 0xa5, 0x98, 0x08, 0x45, 0xb2, 0xe0, 0x3e,
	0x34, 0xa7, 0x93, 0x4c, 0x90, 0x94, 0xca, 0xd0, 0xdb, 0xf1, 0xf6, 0xfc, 0xa8, 0x88, 0x83, 0x87,
	0xb0, 0xc6, 0xe9, 0xb9, 0x8e, 0x0b, 0x42, 0xcd, 0x10, 0xda, 0x08, 0x9e, 0xe6, 0xa4, 0x8f, 0xc1,
	0xef, 0x9b, 0x94, 0x31, 0x4b, 0xc3, 0x65, 0x9b, 0xc1, 0x02, 0xc7, 0xa9, 0x59, 0xbc, 0xd0, 0x34,
	0x56, 0xec, 0x92, 0x86, 0xf5, 0x1d, 0x6f, 0xaf, 0x1e, 0x35, 0x11, 0x38, 0x61, 0x97, 0x34, 0x78,
	0x00, 0xad, 0x33, 0x29, 0xc6, 0xf1, 0x90, 0xb2, 0xc1, 0x50, 0x87, 0x2b, 0x66, 0x19, 0x10, 0xfa,
	0xd6, 0x20, 0xf8, 0x6f, 0x2d, 0xf2, 0xe5, 0x86, 0xfd, 0xb7, 0x16, 0x6e, 0x71, 0x1b, 0x20, 0x91,
	0x94, 0x68, 0x9a, 0xc6, 0x44, 0x87, 0xab, 0x66, 0xd5, 0x77, 0xc8, 0xa1, 0x0e, 0x76, 0xa1, 0x3d,
	0x13, 0x9a, 0x4a, 0x15, 0xcf, 0x48, 0xc6, 0xd2, 0xb0, 0xb9, 0xb3, 0xbc, 0xe7, 0x47, 0x2d, 0x8b,
	0xbd, 0x41, 0x28, 0x78, 0x0c, 0x1d, 0x47, 0x61, 0xdc, 0x92, 0x7c, 0x43, 0x5a, 0xb3, 0xe8, 0xb1,
	0x05, 0x7b, 0x1c, 0x36, 0x8f, 0x68, 0x46, 0x07, 0x44, 0x33, 0xc1, 0x5f, 0x70, 0x2d, 0x19, 0x55,
	0x41, 0x07, 0x6a, 0x2c, 0x35, 0x0d, 0xab, 0x47, 0x35, 0x96, 0x06, 0x21, 0xac, 0xf6, 0x49, 0x46,
	0x78, 0x42, 0x5d, 0x93, 0xf2, 0x30, 0xb8, 0x0b, 0x0d, 0xa5, 0xc9, 0x88, 0x4a, 0xd7, 0x1c, 0x17,
	0x05, 0xf7, 0x60, 0x75, 0x14, 0x33, 0x9e, 0xd2, 0x73, 0xd7, 0x98, 0xc6, 0xe8, 0x18, 0xa3, 0xde,
	0x6f, 0x35, 0x08, 0x16, 0x1b, 0xbe, 0x16, 0x22, 0x3b, 0x22, 0x9a, 0xbc, 0xb3, 0xe3, 0x22, 0x6f,
	0xad, 0x92, 0xf7, 0x09, 0xac, 0x27, 0x53, 0x29, 0x29, 0xd7, 0xb1, 0xa4, 0x73, 0x22, 0x53, 0x65,
	0x36, 0xae, 0x47, 0x1d, 0x07, 0x47, 0x16, 0x0d, 0x3e, 0x85, 0x0d, 0x2d, 0x34, 0xc9, 0xe2, 0xb4,
	0xd8, 0xcc, 0x55, 0xb2, 0x6e, 0xf0, 0x45, 0x0d, 0xc1, 0x23, 0xe8, 0x64, 0x44, 0x53, 0xa5, 0x6d,
	0xc1, 0xf1, 0xc8, 0x5d, 0x56, 0xdb, 0xa2, 0xa6, 0xee, 0x97, 0xb8, 0xb3, 0x4b, 0x25, 0x64, 0x9c,
	0x88, 0x29, 0xcf, 0x2f, 0xad, 0x53, 0xc0, 0xcf, 0x11, 0x0d, 0x0e, 0x61, 0xbb, 0x92, 0x6e, 0x4e,
	0x54, 0x3c, 0xe5, 0xa5, 0x32, 0xf0, 0x36, 0x9b, 0xd1, 0xfd, 0x52, 0xf6, 0x1f, 0x88, 0x3a, 0x2d,
	0x31, 0x7a, 0xbf, 0x7a, 0xe0, 0x1f, 0xe5, 0x59, 0xdf, 0xe9, 0x4d, 0xa9, 0xb7, 0xb5, 0x72, 0x6f,
	0x83, 0xcf, 0x60, 0x73, 0x91, 0x24, 0x26, 0x63, 0x53, 0xa4, 0x6d, 0xcf, 0xc6, 0x62, 0xe1, 0xd0,
	0xe0, 0xa5, 0x0e, 0xd7, 0x2b, 0x1d, 0xfe, 0x04, 0xfc, 0xe2, 0x40, 0xa6, 0x11, 0x7e, 0xb4, 0x00,
	0x7a, 0x27, 0xd0, 0xf8, 0x1a, 0x0f, 0x23, 0x51, 0x13, 0x24, 0xb1, 0x7d, 0x70, 0x9a, 0x70, 0x21,
	0xd6, 0x37, 0x11, 0x22, 0x8b, 0x8b, 0xa2, 0x1b, 0x18, 0x1e, 0x9b, 0x4b, 0xad, 0x14, 0xe5, 0xa2,
	0xde, 0x2f, 0x0d, 0xa8, 0xa3, 0x12, 0x6e, 0xd3, 0x9d, 0xd1, 0xbc, 0xc8, 0x65, 0x90, 0x87, 0x41,
	0x00, 0x75, 0x4e, 0xc6, 0xd4, 0xa9, 0xce, 0xfc, 0x46, 0xb6, 0x9c, 0x72, 0xcd, 0xc6, 0xd4, 0x1d,
	0x29, 0x0f, 0x91, 0x9d, 0x89, 0x81, 0x70, 0xc7, 0x31, 0xbf, 0xd1, 0x1a, 0x66, 0x54, 0x2a, 0x26,
	0xb8, 0x32, 0x17, 0xe9, 0x47, 0x45, 0x8c, 0x85, 0x26, 0x82, 0x9f, 0xb1, 0x81, 0xb9, 0x2b, 0x3f,
	0x72, 0x11, 0x6a, 0xc0, 0xbe, 0xd7, 0x98, 0xc8, 0x64, 0xc8, 0x66, 0x14, 0x5f, 0x9e, 0xd1, 0x80,
	0x85, 0x0f, 0x1d, 0x8a, 0x8f, 0x0f, 0x8d, 0x40, 0x2d, 0x78, 0xbe, 0xe1, 0xad, 0x19, 0xb4, 0xa0,
	0x3d, 0x84, 0x35, 0x2b, 0x52, 0x6b, 0x29, 0x2a, 0x04, 0x2b, 0x3c, 0x03, 0x5a, 0x2b, 0x53, 0xc1,
	0x17, 0xb0, 0x55, 0x26, 0x15, 0xba, 0x6f, 0x19, 0x6e, 0x50, 0xe2, 0xe6, 0xda, 0xdf, 0x85, 0xb6,
	0xd2, 0x44, 0xea, 0xdc, 0x5c, 0xda, 0x86, 0xd9, 0x32, 0x98, 0xf3, 0x97, 0x27, 0xb0, 0x6e, 0x7d,
	0x2f, 0x66, 0x5c, 0x53, 0x39, 0x23, 0x59, 0xb8, 0x66, 0x4f, 0x62, 0xe1, 0x63, 0x87, 0xe2, 0x49,
	0xc4, 0x84, 0x4a, 0xa2, 0x19, 0x1f, 0xc4, 0x89, 0x50, 0x3a, 0xec, 0xd8, 0x93, 0x14, 0xe8, 0x73,
	0xa1, 0x8c, 0x9a, 0x26, 0x64, 0xaa, 0x68, 0x1a, 0xae, 0x1b, 0x75, 0xbb, 0x08, 0xef, 0xe4, 0xcc,
	0xe8, 0x45, 0x85, 0x1b, 0xc6, 0x7e, 0xf2, 0x10, 0xcf, 0x9e, 0x89, 0x39, 0x3e, 0x13, 0x8b, 0x84,
	0x9b, 0xd6, 0x7e, 0x2d, 0xe8, 0x44, 0xf6, 0x00, 0x5a, 0xf6, 0xec, 0xc8, 0x51, 0x61, 0x60, 0x4d,
	0xd4, 0x40, 0xc8, 0x50, 0x98, 0xdf, 0xea, 0x56, 0x85, 0x1f, 0xd9, 0xfc, 0x2e, 0x2c, 0xe5, 0x77,
	0x32, 0xdf, 0x2a, 0xe7, 0x3f, 0xb1, 0x62, 0x2f, 0xf2, 0x1b, 0x4e, 0x78, 0xa7, 0x94, 0xdf, 0x30,
	0x6e, 0xb5, 0x91, 0xbb, 0xb7, 0xdb, 0xc8, 0x2b, 0x58, 0x77, 0x37, 0x34, 0x71, 0xe3, 0x27, 0xbc,
	0xb7, 0xe3, 0xed, 0xb5, 0xbe, 0x7c, 0xbc, 0x7f, 0xeb, 0xbc, 0xda, 0xaf, 0xce, 0xaa, 0xa8, 0xd3,
	0xaf, 0xc4, 0xbd, 0x3f, 0x3d, 0x68, 0x16, 0x83, 0xac, 0x32, 0x87, 0xbc, 0x1b, 0x73, 0xa8, 0xf4,
	0xe0, 0x6a, 0x95, 0x07, 0x57, 0x1e, 0x7f, 0xcb, 0x37, 0xc6, 0xdf, 0x8d, 0xf9, 0x54, 0x7f, 0xff,
	0x7c, 0x5a, 0xb9, 0x31, 0x9f, 0x76, 0xa1, 0x7d, 0xc6, 0x38, 0xc9, 0xd8, 0xa5, 0x9d, 0x50, 0xd6,
	0x0a, 0x5b, 0x05, 0x76, 0xa8, 0x7b, 0xff, 0x7a, 0xd0, 0x70, 0x6d, 0x2e, 0x79, 0x85, 0xf7, 0xbf,
	0x5e, 0x51, 0xfb, 0x10, 0xaf, 0xc0, 0x0b, 0x99, 0xf2, 0xbe, 0xe0, 0x29, 0xea, 0xd1, 0x31, 0x9c,
	0xaf, 0x17, 0xb8, 0x73, 0xb8, 0x2e, 0x40, 0x22, 0xc6, 0x63, 0xa6, 0xf0, 0x51, 0xbb, 0xb7, 0x5f,
	0x42, 0xb0, 0xaa, 0xb1, 0xe0, 0x0c, 0xb5, 0x61, 0x0d, 0x20, 0x0f, 0x71, 0x65, 0x4e, 0xfb, 0x8a,
	0x69, 0xea, 0x0c, 0x20, 0x0f, 0x0b, 0x27, 0x69, 0x2e, 0x9c, 0xa4, 0xf7, 0x87, 0x07, 0x1b, 0xa7,
	0xf9, 0xde, 0xf9, 0x08, 0xdd, 0x82, 0x15, 0x6b, 0xd1, 0xd6, 0xcd, 0x6c, 0xf0, 0xde, 0xe3, 0xde,
	0x3a, 0x47, 0x2b, 0x6e, 0x5c, 0xbf, 0xe1, 0xc6, 0xa8, 0x71, 0x63, 0x88, 0x68, 0xf7, 0xc6, 0xf7,
	0xdc, 0xe0, 0xca, 0xc1, 0xef, 0xd1, 0xfc, 0x16, 0x9d, 0x6c, 0x54, 0x5c, 0xf7, 0x3b, 0xe8, 0x14,
	0x55, 0x9f, 0x68, 0xa2, 0x29, 0xde, 0x78, 0x26, 0xe6, 0x71, 0xb9, 0xee, 0x66, 0x26, 0xe6, 0x76,
	0xb8, 0x6c, 0x03, 0x0c, 0xd9, 0x60, 0x58, 0x19, 0x3c, 0x3e, 0x22, 0x66, 0xf9, 0xd9, 0x37, 0x7f,
	0x5d, 0x75, 0xbd, 0xb7, 0x57, 0x5d, 0xef, 0x9f, 0xab, 0xae, 0xf7, 0xf3, 0x75, 0x77, 0xe9, 0xed,
	0x75, 0x77, 0xe9, 0xef, 0xeb, 0xee, 0xd2, 0x4f, 0x9f, 0x0f, 0x98, 0x1e, 0x4e, 0xfb, 0xfb, 0x89,
	0x18, 0x1f, 0xbc, 0xfc, 0xf1, 0xcd, 0x8b, 0x57, 0x54, 0xcf, 0x85, 0x1c, 0x1d, 0x24, 0x43, 0xc2,
	0xf8, 0xc1, 0xf9, 0xe2, 0x6b, 0x4f, 0x5f, 0x4c, 0xa8, 0xea, 0x37, 0xcc, 0x37, 0xde, 0x57, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xbc, 0xfa, 0xf5, 0x0b, 0x0a, 0x00, 0x00,
}

func (m *BundleProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BundleProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BundleProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VotersInvalid) > 0 {
		for iNdEx := len(m.VotersInvalid) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VotersInvalid[iNdEx])
			copy(dAtA[i:], m.VotersInvalid[iNdEx])
			i = encodeVarintRegistry(dAtA, i, uint64(len(m.VotersInvalid[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.VotersValid) > 0 {
		for iNdEx := len(m.VotersValid) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VotersValid[iNdEx])
			copy(dAtA[i:], m.VotersValid[iNdEx])
			i = encodeVarintRegistry(dAtA, i, uint64(len(m.VotersValid[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CreatedAt != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.ToHeight != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.ToHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.FromHeight != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.FromHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.ByteSize != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.ByteSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BundleId) > 0 {
		i -= len(m.BundleId)
		copy(dAtA[i:], m.BundleId)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.BundleId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NextUploader) > 0 {
		i -= len(m.NextUploader)
		copy(dAtA[i:], m.NextUploader)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.NextUploader)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uploader) > 0 {
		i -= len(m.Uploader)
		copy(dAtA[i:], m.Uploader)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Uploader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KIndex != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.KIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationPoolData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationPoolData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationPoolData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestIndexWasUndelegation {
		i--
		if m.LatestIndexWasUndelegation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DelegatorCount != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.DelegatorCount))
		i--
		dAtA[i] = 0x30
	}
	if m.LatestIndexK != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.LatestIndexK))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalDelegation != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.TotalDelegation))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrentRewards != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.CurrentRewards))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Delegator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x22
	}
	if m.DelegationAmount != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.DelegationAmount))
		i--
		dAtA[i] = 0x18
	}
	if m.KIndex != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.KIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Funder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Funder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Funder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BundleProposal != nil {
		{
			size, err := m.BundleProposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.TotalDelegation != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.TotalDelegation))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.TotalStake != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.TotalStake))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.LowestStaker) > 0 {
		i -= len(m.LowestStaker)
		copy(dAtA[i:], m.LowestStaker)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.LowestStaker)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Stakers) > 0 {
		for iNdEx := len(m.Stakers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Stakers[iNdEx])
			copy(dAtA[i:], m.Stakers[iNdEx])
			i = encodeVarintRegistry(dAtA, i, uint64(len(m.Stakers[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.TotalFunds != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.TotalFunds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.LowestFunder) > 0 {
		i -= len(m.LowestFunder)
		copy(dAtA[i:], m.LowestFunder)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.LowestFunder)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Funders) > 0 {
		for iNdEx := len(m.Funders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Funders[iNdEx])
			copy(dAtA[i:], m.Funders[iNdEx])
			i = encodeVarintRegistry(dAtA, i, uint64(len(m.Funders[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.OperatingCost != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.OperatingCost))
		i--
		dAtA[i] = 0x70
	}
	if m.UploadInterval != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.UploadInterval))
		i--
		dAtA[i] = 0x68
	}
	if m.StartHeight != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x60
	}
	if m.TotalBundleRewards != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.TotalBundleRewards))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalBundles != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.TotalBundles))
		i--
		dAtA[i] = 0x50
	}
	if m.BytesArchived != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.BytesArchived))
		i--
		dAtA[i] = 0x48
	}
	if m.HeightArchived != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.HeightArchived))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Versions) > 0 {
		i -= len(m.Versions)
		copy(dAtA[i:], m.Versions)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Versions)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalizedAt != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.FinalizedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.ToHeight != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.ToHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.FromHeight != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.FromHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Uploader) > 0 {
		i -= len(m.Uploader)
		copy(dAtA[i:], m.Uploader)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Uploader)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BundleId) > 0 {
		i -= len(m.BundleId)
		copy(dAtA[i:], m.BundleId)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.BundleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Staker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UnbondingAmount != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.UnbondingAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x30
	}
	if m.CreationTime != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.CreationTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HighIndex != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.HighIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.LowIndex != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.LowIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegistry(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegistry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BundleProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uploader)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.NextUploader)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.BundleId)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.ByteSize != 0 {
		n += 1 + sovRegistry(uint64(m.ByteSize))
	}
	if m.FromHeight != 0 {
		n += 1 + sovRegistry(uint64(m.FromHeight))
	}
	if m.ToHeight != 0 {
		n += 1 + sovRegistry(uint64(m.ToHeight))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovRegistry(uint64(m.CreatedAt))
	}
	if len(m.VotersValid) > 0 {
		for _, s := range m.VotersValid {
			l = len(s)
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	if len(m.VotersInvalid) > 0 {
		for _, s := range m.VotersInvalid {
			l = len(s)
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	return n
}

func (m *DelegationEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegistry(uint64(m.Id))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.KIndex != 0 {
		n += 1 + sovRegistry(uint64(m.KIndex))
	}
	return n
}

func (m *DelegationPoolData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegistry(uint64(m.Id))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.CurrentRewards != 0 {
		n += 1 + sovRegistry(uint64(m.CurrentRewards))
	}
	if m.TotalDelegation != 0 {
		n += 1 + sovRegistry(uint64(m.TotalDelegation))
	}
	if m.LatestIndexK != 0 {
		n += 1 + sovRegistry(uint64(m.LatestIndexK))
	}
	if m.DelegatorCount != 0 {
		n += 1 + sovRegistry(uint64(m.DelegatorCount))
	}
	if m.LatestIndexWasUndelegation {
		n += 2
	}
	return n
}

func (m *Delegator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegistry(uint64(m.Id))
	}
	if m.KIndex != 0 {
		n += 1 + sovRegistry(uint64(m.KIndex))
	}
	if m.DelegationAmount != 0 {
		n += 1 + sovRegistry(uint64(m.DelegationAmount))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *Funder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovRegistry(uint64(m.PoolId))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovRegistry(uint64(m.Amount))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegistry(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Versions)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.HeightArchived != 0 {
		n += 1 + sovRegistry(uint64(m.HeightArchived))
	}
	if m.BytesArchived != 0 {
		n += 1 + sovRegistry(uint64(m.BytesArchived))
	}
	if m.TotalBundles != 0 {
		n += 1 + sovRegistry(uint64(m.TotalBundles))
	}
	if m.TotalBundleRewards != 0 {
		n += 1 + sovRegistry(uint64(m.TotalBundleRewards))
	}
	if m.StartHeight != 0 {
		n += 1 + sovRegistry(uint64(m.StartHeight))
	}
	if m.UploadInterval != 0 {
		n += 1 + sovRegistry(uint64(m.UploadInterval))
	}
	if m.OperatingCost != 0 {
		n += 1 + sovRegistry(uint64(m.OperatingCost))
	}
	if m.Paused {
		n += 2
	}
	if len(m.Funders) > 0 {
		for _, s := range m.Funders {
			l = len(s)
			n += 2 + l + sovRegistry(uint64(l))
		}
	}
	l = len(m.LowestFunder)
	if l > 0 {
		n += 2 + l + sovRegistry(uint64(l))
	}
	if m.TotalFunds != 0 {
		n += 2 + sovRegistry(uint64(m.TotalFunds))
	}
	if len(m.Stakers) > 0 {
		for _, s := range m.Stakers {
			l = len(s)
			n += 2 + l + sovRegistry(uint64(l))
		}
	}
	l = len(m.LowestStaker)
	if l > 0 {
		n += 2 + l + sovRegistry(uint64(l))
	}
	if m.TotalStake != 0 {
		n += 2 + sovRegistry(uint64(m.TotalStake))
	}
	if m.TotalDelegation != 0 {
		n += 2 + sovRegistry(uint64(m.TotalDelegation))
	}
	if m.BundleProposal != nil {
		l = m.BundleProposal.Size()
		n += 2 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BundleId)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovRegistry(uint64(m.PoolId))
	}
	l = len(m.Uploader)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.FromHeight != 0 {
		n += 1 + sovRegistry(uint64(m.FromHeight))
	}
	if m.ToHeight != 0 {
		n += 1 + sovRegistry(uint64(m.ToHeight))
	}
	if m.FinalizedAt != 0 {
		n += 1 + sovRegistry(uint64(m.FinalizedAt))
	}
	return n
}

func (m *Staker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovRegistry(uint64(m.PoolId))
	}
	if m.Amount != 0 {
		n += 1 + sovRegistry(uint64(m.Amount))
	}
	if m.UnbondingAmount != 0 {
		n += 1 + sovRegistry(uint64(m.UnbondingAmount))
	}
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *UnbondingEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRegistry(uint64(m.Index))
	}
	if m.PoolId != 0 {
		n += 1 + sovRegistry(uint64(m.PoolId))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.CreationTime != 0 {
		n += 1 + sovRegistry(uint64(m.CreationTime))
	}
	if m.Amount != 0 {
		n += 1 + sovRegistry(uint64(m.Amount))
	}
	return n
}

func (m *UnbondingState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowIndex != 0 {
		n += 1 + sovRegistry(uint64(m.LowIndex))
	}
	if m.HighIndex != 0 {
		n += 1 + sovRegistry(uint64(m.HighIndex))
	}
	return n
}

func sovRegistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegistry(x uint64) (n int) {
	return sovRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BundleProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BundleProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BundleProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uploader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uploader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextUploader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextUploader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteSize", wireType)
			}
			m.ByteSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHeight", wireType)
			}
			m.FromHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToHeight", wireType)
			}
			m.ToHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotersValid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotersValid = append(m.VotersValid, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotersInvalid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotersInvalid = append(m.VotersInvalid, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KIndex", wireType)
			}
			m.KIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationPoolData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationPoolData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationPoolData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			m.CurrentRewards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentRewards |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
			}
			m.TotalDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestIndexK", wireType)
			}
			m.LatestIndexK = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestIndexK |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorCount", wireType)
			}
			m.DelegatorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegatorCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestIndexWasUndelegation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LatestIndexWasUndelegation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KIndex", wireType)
			}
			m.KIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAmount", wireType)
			}
			m.DelegationAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Funder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Funder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Funder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightArchived", wireType)
			}
			m.HeightArchived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightArchived |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesArchived", wireType)
			}
			m.BytesArchived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesArchived |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBundles", wireType)
			}
			m.TotalBundles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBundles |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBundleRewards", wireType)
			}
			m.TotalBundleRewards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBundleRewards |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadInterval", wireType)
			}
			m.UploadInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingCost", wireType)
			}
			m.OperatingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatingCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funders = append(m.Funders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestFunder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowestFunder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFunds", wireType)
			}
			m.TotalFunds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFunds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakers = append(m.Stakers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestStaker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowestStaker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStake", wireType)
			}
			m.TotalStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
			}
			m.TotalDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BundleProposal == nil {
				m.BundleProposal = &BundleProposal{}
			}
			if err := m.BundleProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uploader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uploader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHeight", wireType)
			}
			m.FromHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToHeight", wireType)
			}
			m.ToHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedAt", wireType)
			}
			m.FinalizedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingAmount", wireType)
			}
			m.UnbondingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowIndex", wireType)
			}
			m.LowIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighIndex", wireType)
			}
			m.HighIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegistry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegistry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegistry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegistry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegistry = fmt.Errorf("proto: unexpected end of group")
)
